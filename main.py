import logging
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import PicklePersistence
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
ADMIN_IDS = [7470235989, 1008609216, 801300839]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    MAIN_MENU,
    ADMIN_MENU,
    EMPLOYEE_MENU,
    ENTER_EMPLOYEE_NAME,
    ENTER_EMPLOYEE_SALARY,
    ENTER_TASK_NAME,
    ENTER_TASK_POINTS,
    ADD_TASK,
    TAKE_TASK,
    COMPLETE_TASK,
    SELECT_PERIOD,
    ANALYTICS,
    SELECT_EMPLOYEE,
    ASSIGN_TASK,
    SELECT_EMPLOYEE_EDIT,
    EDIT_EMPLOYEE,
    EDIT_EMPLOYEE_NAME,
    EDIT_EMPLOYEE_SALARY,
    SELECT_TASK_EDIT,
    EDIT_TASK,
    EDIT_TASK_NAME,
    EDIT_TASK_POINTS,
    EDIT_TASK_CATEGORY,
    SELECT_ACTIVE_TASK_CANCEL,
    VIEW_TASK_HISTORY

) = range(25)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('shoeshop.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS employees (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        salary REAL NOT NULL,
        telegram_id INTEGER UNIQUE,
        active BOOLEAN DEFAULT 1
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        points INTEGER NOT NULL,
        category TEXT NOT NULL
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS active_tasks (
        id INTEGER PRIMARY KEY,
        employee_id INTEGER NOT NULL,
        task_id INTEGER NOT NULL,
        start_time TEXT NOT NULL,
        FOREIGN KEY (employee_id) REFERENCES employees (id),
        FOREIGN KEY (task_id) REFERENCES tasks (id)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS completed_tasks (
        id INTEGER PRIMARY KEY,
        employee_id INTEGER NOT NULL,
        task_id INTEGER NOT NULL,
        start_time TEXT NOT NULL,
        end_time TEXT NOT NULL,
        points_earned INTEGER NOT NULL,
        duration_seconds REAL NOT NULL,
        FOREIGN KEY (employee_id) REFERENCES employees (id),
        FOREIGN KEY (task_id) REFERENCES tasks (id)
    )
    ''')
    
    conn.commit()
    conn.close()

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
def fill_initial_data():
    conn = sqlite3.connect('shoeshop.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ
    cursor.execute("SELECT COUNT(*) FROM tasks")
    if cursor.fetchone()[0] == 0:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á
        tasks = [
            ("–†–∞–∑–±–æ—Ä –Ω–æ–≤–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏", 10, "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞"),
            ("–í—ã–∫–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –≤–∏—Ç—Ä–∏–Ω—É", 5, "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞"),
            ("–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥–∞", 15, "–õ–æ–≥–∏—Å—Ç–∏–∫–∞"),
            ("–ó–∞–∫–∞–∑ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏ —Ç–æ–≤–∞—Ä–∞", 10, "–ó–∞–∫—É–ø–∫–∞"),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞", 5, "–õ–æ–≥–∏—Å—Ç–∏–∫–∞"),
            ("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞", 3, "–ü—Ä–æ–¥–∞–∂–∏"),
            ("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏", 5, "–ü—Ä–æ–¥–∞–∂–∏"),
            ("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö", 8, "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞", 12, "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"),
            ("–£–±–æ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∑–∞–ª–∞", 7, "–î—Ä—É–≥–æ–µ")
        ]
        
        cursor.executemany(
            "INSERT INTO tasks (name, points, category) VALUES (?, ?, ?)",
            tasks
        )
        
        conn.commit()
    
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id in ADMIN_IDS

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
def is_employee_registered(user_id):
    conn = sqlite3.connect('shoeshop.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM employees WHERE telegram_id = ? AND active = 1", (user_id,))
    result = cursor.fetchone() is not None
    conn.close()
    return result

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ Telegram ID
def get_employee_id(user_id):
    conn = sqlite3.connect('shoeshop.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM employees WHERE telegram_id = ? AND active = 1", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ –∫—Ä–æ—Å—Å–æ–≤–æ–∫."
    )
    
    keyboard = []
    
    if is_admin(user_id):
        keyboard.append(["üë®‚Äçüíº –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"])
    
    if is_employee_registered(user_id):
        keyboard.append(["üë∑ –ú–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"])
    else:
        await update.message.reply_text(
            "–ï—Å–ª–∏ –≤—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register ID, "
            "–≥–¥–µ ID - –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."
        )
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", reply_markup=reply_markup)
    
    return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "üë®‚Äçüíº –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" and is_admin(user_id):
        keyboard = [
            ["üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
            ["üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return ADMIN_MENU
    
    elif text == "üë∑ –ú–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" and is_employee_registered(user_id):
        keyboard = [
            ["üìù –í–∑—è—Ç—å –∑–∞–¥–∞—á—É", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return EMPLOYEE_MENU
    
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
        return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
        return ENTER_EMPLOYEE_NAME
    
    elif text == "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
        return ENTER_TASK_NAME
    
    elif text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        keyboard = [
            ["–ó–∞ —Å–µ–≥–æ–¥–Ω—è", "–ó–∞ –Ω–µ–¥–µ–ª—é"],
            ["–ó–∞ –º–µ—Å—è—Ü", "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=reply_markup)
        return SELECT_PERIOD
    
    elif text == "üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É":
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM employees WHERE active = 1 ORDER BY name")
        employees = cursor.fetchall()
        conn.close()
        
        if not employees:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
            return ADMIN_MENU
        
        keyboard = []
        for emp_id, emp_name in employees:
            keyboard.append([f"{emp_name} - ID: {emp_id}"])
        
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", reply_markup=reply_markup)
        return SELECT_EMPLOYEE
    
    elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞":
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, name, salary FROM employees WHERE active = 1 ORDER BY name")
        employees = cursor.fetchall()
        conn.close()
        
        if not employees:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
            return ADMIN_MENU
        
        keyboard = []
        for emp_id, emp_name, emp_salary in employees:
            keyboard.append([f"{emp_name} (–ó–ü: {emp_salary} —Ä—É–±.) - ID: {emp_id}"])
        
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
        return SELECT_EMPLOYEE_EDIT
    
    elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É":
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, name, points, category FROM tasks ORDER BY category, name")
        tasks = cursor.fetchall()
        conn.close()
        
        if not tasks:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return ADMIN_MENU
        
        keyboard = []
        current_category = None
        
        for task in tasks:
            task_id, task_name, points, category = task
            
            if category != current_category:
                if keyboard:
                    keyboard.append([])
                current_category = category
                keyboard.append([f"--- {category} ---"])
            
            keyboard.append([f"{task_name} ({points} –æ—á–∫–æ–≤) - ID: {task_id}"])
        
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
        return SELECT_TASK_EDIT
    
    elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É":
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        cursor.execute("""
            SELECT a.id, e.name as employee_name, t.name as task_name, a.start_time
            FROM active_tasks a
            JOIN employees e ON a.employee_id = e.id
            JOIN tasks t ON a.task_id = t.id
            ORDER BY a.start_time
        """)
        
        active_tasks = cursor.fetchall()
        conn.close()
        
        if not active_tasks:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return ADMIN_MENU
        
        keyboard = []
        for task_id, employee_name, task_name, start_time in active_tasks:
            start_datetime = datetime.fromisoformat(start_time)
            duration = (datetime.now() - start_datetime).total_seconds() / 60.0
            
            keyboard.append([f"{employee_name}: {task_name} ({round(duration, 2)} –º–∏–Ω.) - ID: {task_id}"])
        
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=reply_markup)
        return SELECT_ACTIVE_TASK_CANCEL
    
    elif text == "üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á":
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM employees WHERE active = 1 ORDER BY name")
        employees = cursor.fetchall()
        conn.close()
        
        if not employees:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
            return ADMIN_MENU
        
        keyboard = []
        for emp_id, emp_name in employees:
            keyboard.append([f"{emp_name} - ID: {emp_id}"])
        
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á:", reply_markup=reply_markup)
        return VIEW_TASK_HISTORY
    
    elif text == "üîô –ù–∞–∑–∞–¥":
        keyboard = []
        user_id = update.effective_user.id
        
        if is_admin(user_id):
            keyboard.append(["üë®‚Äçüíº –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"])
        
        if is_employee_registered(user_id):
            keyboard.append(["üë∑ –ú–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
        return MAIN_MENU
    
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
        return ADMIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async def employee_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    employee_id = get_employee_id(user_id)
    
    if text == "üìù –í–∑—è—Ç—å –∑–∞–¥–∞—á—É":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM active_tasks WHERE employee_id = ?", (employee_id,))
        active_count = cursor.fetchone()[0]
        
        if active_count >= 3:
            conn.close()
            await update.message.reply_text(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 3 –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –±—Ä–∞—Ç—å –Ω–æ–≤—É—é."
            )
            return EMPLOYEE_MENU
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á
        cursor.execute("""
            SELECT t.id, t.name, t.points, t.category
            FROM tasks t
            ORDER BY t.category, t.name
        """)
        tasks = cursor.fetchall()
        conn.close()
        
        if not tasks:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return EMPLOYEE_MENU
        
        keyboard = []
        current_category = None
        
        for task in tasks:
            task_id, task_name, points, category = task
            
            if category != current_category:
                if keyboard:
                    keyboard.append([])
                current_category = category
                keyboard.append([f"--- {category} ---"])
            
            keyboard.append([f"{task_name} ({points} –æ—á–∫–æ–≤) - ID: {task_id}"])
        
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:", reply_markup=reply_markup)
        return TAKE_TASK
    
    elif text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É":
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        cursor.execute("""
            SELECT a.id, t.name, t.points, a.start_time
            FROM active_tasks a
            JOIN tasks t ON a.task_id = t.id
            WHERE a.employee_id = ?
        """, (employee_id,))
        active_tasks = cursor.fetchall()
        conn.close()
        
        if not active_tasks:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return EMPLOYEE_MENU
        
        keyboard = []
        for task in active_tasks:
            task_id, task_name, points, start_time = task
            start_datetime = datetime.fromisoformat(start_time)
            duration = (datetime.now() - start_datetime).total_seconds() / 60.0  # –≤ –º–∏–Ω—É—Ç–∞—Ö
            
            keyboard.append([f"{task_name} ({points} –æ—á–∫–æ–≤, {round(duration, 2)} –º–∏–Ω.) - ID: {task_id}"])
        
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:", reply_markup=reply_markup)
        return COMPLETE_TASK
    
    elif text == "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        cursor.execute("""
            SELECT 
                COUNT(*) as total_tasks,
                SUM(points_earned) as total_points,
                AVG(duration_seconds) / 60.0 as avg_duration,
                SUM(duration_seconds) / 3600.0 as total_duration
            FROM completed_tasks
            WHERE employee_id = ?
        """, (employee_id,))
        stats = cursor.fetchone()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        cursor.execute("""
            SELECT 
                t.category,
                COUNT(*) as category_count,
                SUM(c.points_earned) as category_points
            FROM completed_tasks c
            JOIN tasks t ON c.task_id = t.id
            WHERE c.employee_id = ?
            GROUP BY t.category
            ORDER BY category_points DESC
        """, (employee_id,))
        category_stats = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        cursor.execute("""
            SELECT 
                t.name,
                t.points,
                a.start_time
            FROM active_tasks a
            JOIN tasks t ON a.task_id = t.id
            WHERE a.employee_id = ?
        """, (employee_id,))
        active_tasks = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        cursor.execute("SELECT name FROM employees WHERE id = ?", (employee_id,))
        employee_name = cursor.fetchone()[0]
        
        conn.close()
        
        total_tasks, total_points, avg_duration, total_duration = stats
        
        response = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name}*\n\n"
        response += f"üìù –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {total_tasks or 0}\n"
        response += f"üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—á–∫–æ–≤: {total_points or 0}\n"
        response += f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: {round(avg_duration or 0, 2)} –º–∏–Ω.\n"
        response += f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {round(total_duration or 0, 2)} —á.\n\n"
        
        if category_stats:
            response += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
            for category, count, points in category_stats:
                response += f"‚Ä¢ {category}: {count} –∑–∞–¥–∞—á, {points} –æ—á–∫–æ–≤\n"
            response += "\n"
        
        if active_tasks:
            response += "*–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n"
            for name, points, start_time in active_tasks:
                start_datetime = datetime.fromisoformat(start_time)
                duration = (datetime.now() - start_datetime).total_seconds() / 60.0
                response += f"‚Ä¢ {name} ({points} –æ—á–∫–æ–≤) - –≤ —Ä–∞–±–æ—Ç–µ {round(duration, 2)} –º–∏–Ω.\n"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        return EMPLOYEE_MENU
    
    elif text == "üîô –ù–∞–∑–∞–¥":
        keyboard = []
        
        if is_admin(user_id):
            keyboard.append(["üë®‚Äçüíº –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"])
        
        if is_employee_registered(user_id):
            keyboard.append(["üë∑ –ú–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
        return MAIN_MENU
    
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
        return EMPLOYEE_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async def enter_employee_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    context.user_data['employee_name'] = name
    
    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {name}:")
    return ENTER_EMPLOYEE_SALARY

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async def enter_employee_salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        salary = float(update.message.text)
        name = context.user_data['employee_name']
        
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        cursor.execute(
            "INSERT INTO employees (name, salary, active) VALUES (?, ?, 1)",
            (name, salary)
        )
        
        employee_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π {salary} —Ä—É–±.\n"
            f"ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee_id}\n\n"
            f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/register {employee_id}"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = [
            ["üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
            ["üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)
        return ADMIN_MENU
        
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã.")
        return ENTER_EMPLOYEE_SALARY

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async def enter_task_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    context.user_data['task_name'] = name
    
    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –∑–∞–¥–∞—á—É '{name}':")
    return ENTER_TASK_POINTS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ—á–∫–æ–≤ –∑–∞ –∑–∞–¥–∞—á—É
async def enter_task_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        points = int(update.message.text)
        name = context.user_data['task_name']
        
        if points <= 0:
            await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return ENTER_TASK_POINTS
        
        context.user_data['task_points'] = points
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        keyboard = [
            ["–†–∞—Å–ø–∞–∫–æ–≤–∫–∞", "–õ–æ–≥–∏—Å—Ç–∏–∫–∞"],
            ["–ü—Ä–æ–¥–∞–∂–∏", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"],
            ["–ó–∞–∫—É–ø–∫–∞", "–î—Ä—É–≥–æ–µ"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏ '{name}':",
            reply_markup=reply_markup
        )
        return ADD_TASK
        
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ—á–∫–æ–≤.")
        return ENTER_TASK_POINTS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text
    name = context.user_data['task_name']
    points = context.user_data['task_points']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
    valid_categories = ["–†–∞—Å–ø–∞–∫–æ–≤–∫–∞", "–õ–æ–≥–∏—Å—Ç–∏–∫–∞", "–ü—Ä–æ–¥–∞–∂–∏", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ó–∞–∫—É–ø–∫–∞", "–î—Ä—É–≥–æ–µ"]
    if category not in valid_categories:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return ADD_TASK
    
    conn = sqlite3.connect('shoeshop.db')
    cursor = conn.cursor()
    
    cursor.execute(
        "INSERT INTO tasks (name, points, category) VALUES (?, ?, ?)",
        (name, points, category)
    )
    
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        f"‚úÖ –ó–∞–¥–∞—á–∞ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"–û—á–∫–∏: {points}"
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = [
        ["üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
        ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
        ["üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
        ["üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"],
        ["üîô –ù–∞–∑–∞–¥"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)
    return ADMIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑—è—Ç–∏—è –∑–∞–¥–∞—á–∏
async def take_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    employee_id = get_employee_id(user_id)
    
    if text == "üîô –ù–∞–∑–∞–¥":
        keyboard = [
            ["üìù –í–∑—è—Ç—å –∑–∞–¥–∞—á—É", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", reply_markup=reply_markup)
        return EMPLOYEE_MENU
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if text.startswith("--- ") and text.endswith(" ---"):
        await update.message.reply_text("–≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É.")
        return TAKE_TASK
    
    try:
        task_id = int(text.split("ID: ")[1])
        
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        cursor.execute("SELECT name, points FROM tasks WHERE id = ?", (task_id,))
        task_info = cursor.fetchone()
        
        if not task_info:
            conn.close()
            await update.message.reply_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return TAKE_TASK
        
        task_name, points = task_info
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è—Ç–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∑–∞–¥–∞—á–∞ —ç—Ç–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
        cursor.execute(
            "SELECT id FROM active_tasks WHERE employee_id = ? AND task_id = ?",
            (employee_id, task_id)
        )
        if cursor.fetchone():
            conn.close()
            await update.message.reply_text("–í—ã —É–∂–µ –≤–∑—è–ª–∏ —ç—Ç—É –∑–∞–¥–∞—á—É.")
            return TAKE_TASK
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
        now = datetime.now().isoformat()
        cursor.execute(
            "INSERT INTO active_tasks (employee_id, task_id, start_time) VALUES (?, ?, ?)",
            (employee_id, task_id, now)
        )
        
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞—á—É '{task_name}' ({points} –æ—á–∫–æ–≤).\n"
            f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        keyboard = [
            ["üìù –í–∑—è—Ç—å –∑–∞–¥–∞—á—É", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", reply_markup=reply_markup)
        return EMPLOYEE_MENU
        
    except (IndexError, ValueError):
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return TAKE_TASK

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async def complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    employee_id = get_employee_id(user_id)
    
    if text == "üîô –ù–∞–∑–∞–¥":
        keyboard = [
            ["üìù –í–∑—è—Ç—å –∑–∞–¥–∞—á—É", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", reply_markup=reply_markup)
        return EMPLOYEE_MENU
    
    try:
        active_task_id = int(text.split("ID: ")[1])
        
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–µ
        cursor.execute("""
            SELECT a.task_id, t.name, t.points, a.start_time
            FROM active_tasks a
            JOIN tasks t ON a.task_id = t.id
            WHERE a.id = ? AND a.employee_id = ?
        """, (active_task_id, employee_id))
        
        task_info = cursor.fetchone()
        
        if not task_info:
            conn.close()
            await update.message.reply_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
            return COMPLETE_TASK
        
        task_id, task_name, points, start_time = task_info
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        start_datetime = datetime.fromisoformat(start_time)
        end_datetime = datetime.now()
        duration_seconds = (end_datetime - start_datetime).total_seconds()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        cursor.execute("""
            INSERT INTO completed_tasks 
            (employee_id, task_id, start_time, end_time, points_earned, duration_seconds)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (
            employee_id, 
            task_id, 
            start_time, 
            end_datetime.isoformat(), 
            points, 
            duration_seconds
        ))
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        cursor.execute("DELETE FROM active_tasks WHERE id = ?", (active_task_id,))
        
        conn.commit()
        conn.close()
        
        duration_minutes = duration_seconds / 60.0
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—á–∫–æ–≤: {points}\n"
            f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {round(duration_minutes, 2)} –º–∏–Ω."
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        keyboard = [
            ["üìù –í–∑—è—Ç—å –∑–∞–¥–∞—á—É", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", reply_markup=reply_markup)
        return EMPLOYEE_MENU
        
    except (IndexError, ValueError):
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return COMPLETE_TASK

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
async def select_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        keyboard = [
            ["üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
            ["üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)
        return ADMIN_MENU
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    now = datetime.now()
    
    if text == "–ó–∞ —Å–µ–≥–æ–¥–Ω—è":
        start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
        period_name = "—Å–µ–≥–æ–¥–Ω—è"
    elif text == "–ó–∞ –Ω–µ–¥–µ–ª—é":
        start_date = now - timedelta(days=7)
        period_name = "–ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"
    elif text == "–ó–∞ –º–µ—Å—è—Ü":
        start_date = now - timedelta(days=30)
        period_name = "–ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
    elif text == "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è":
        start_date = datetime(2000, 1, 1)  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–≤–Ω–æ
        period_name = "–≤—Å—ë –≤—Ä–µ–º—è"
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return SELECT_PERIOD
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
    context.user_data['analytics_start_date'] = start_date.isoformat()
    context.user_data['analytics_period_name'] = period_name
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    keyboard = [
        ["üë• –ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º", "üéØ –ü–æ –∑–∞–¥–∞—á–∞–º"],
        ["üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ {period_name}:", reply_markup=reply_markup)
    return ANALYTICS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
async def analytics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    start_date = datetime.fromisoformat(context.user_data['analytics_start_date'])
    period_name = context.user_data['analytics_period_name']
    
    if text == "üë• –ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º":
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        show_all = context.user_data.get('show_all_employees', False)
        
        query = """
            SELECT 
                e.id,
                e.name,
                COUNT(c.id) as completed_count,
                SUM(c.points_earned) as total_points,
                AVG(c.duration_seconds) / 60.0 as avg_duration,
                SUM(c.duration_seconds) / 3600.0 as total_hours,
                e.salary,
                e.active
            FROM employees e
            LEFT JOIN completed_tasks c ON e.id = c.employee_id AND c.end_time >= ?
        """
        
        if not show_all:
            query += " WHERE e.active = 1"
        
        query += " GROUP BY e.id ORDER BY total_points DESC"
        
        cursor.execute(query, (start_date.isoformat(),))
        employees_stats = cursor.fetchall()
        conn.close()
        
        if not employees_stats:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö.")
            return ANALYTICS
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        keyboard = [
            ["üë• –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö" if not show_all else "üë• –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        response = f"üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∑–∞ {period_name}*\n"
        if show_all:
            response += "_(–ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö)_\n\n"
        else:
            response += "_(–ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏)_\n\n"
        
        for emp in employees_stats:
            emp_id, name, completed, points, avg_duration, total_hours, salary, active = emp
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º None –≤ 0 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            completed = completed or 0
            points = points or 0
            avg_duration = avg_duration or 0
            total_hours = total_hours or 0
            
            # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ—á–∫–æ–≤ –≤ —á–∞—Å)
            # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –º–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            if completed > 0 and avg_duration > 0:
                # –°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞ —á–∞—Å –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                tasks_per_hour = 60 / avg_duration
                # –°–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞ —á–∞—Å
                points_per_hour = round((points / completed) * tasks_per_hour, 2)
            elif total_hours > 0:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
                points_per_hour = round(points / total_hours, 2)
            else:
                points_per_hour = 0
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—á–∫–∞ (—Ä—É–±/–æ—á–∫–æ)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Å—è—á–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü
            if points_per_hour > 0:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 160 —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –≤ –º–µ—Å—è—Ü (8 —á–∞—Å–æ–≤ * 20 –¥–Ω–µ–π)
                monthly_points_estimate = points_per_hour * 160
                # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –æ—á–∫–∞
                salary_per_point = round(salary / monthly_points_estimate, 2)
            else:
                salary_per_point = 0
            
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            response += f"*{name}* (ID: {emp_id}) - {status}\n"
            response += f"üìù –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {completed}\n"
            response += f"üèÜ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {points}\n"
            response += f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: {round(avg_duration, 2)} –º–∏–Ω.\n"
            response += f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {round(total_hours, 2)} —á.\n"
            response += f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {points_per_hour} –æ—á–∫–æ–≤/—á–∞—Å\n"
            response += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—á–∫–∞: {salary_per_point} —Ä—É–±.\n\n"
        
        await update.message.reply_text(response, parse_mode='Markdown', reply_markup=reply_markup)
        return ANALYTICS
    
    elif text == "üë• –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö":
        context.user_data['show_all_employees'] = True
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        context.user_data['last_analytics_command'] = "üë• –ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"
        return await analytics(update, context)
    
    elif text == "üë• –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ":
        context.user_data['show_all_employees'] = False
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        context.user_data['last_analytics_command'] = "üë• –ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"
        return await analytics(update, context)
    elif text == "üéØ –ü–æ –∑–∞–¥–∞—á–∞–º":
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        cursor.execute("""
            SELECT 
                t.id,
                t.name,
                t.category,
                COUNT(c.id) as completed_count,
                AVG(c.duration_seconds) / 60.0 as avg_duration,
                t.points
            FROM tasks t
            LEFT JOIN completed_tasks c ON t.id = c.task_id AND c.end_time >= ?
            GROUP BY t.id
            ORDER BY completed_count DESC
        """, (start_date.isoformat(),))
        tasks_stats = cursor.fetchall()
        conn.close()
        
        if not tasks_stats:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–∞—Ö.")
            return ANALYTICS
        
        response = f"üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º –∑–∞ {period_name}*\n\n"
        
        current_category = None
        for task in tasks_stats:
            task_id, name, category, completed, avg_duration, points = task
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º None –≤ 0
            completed = completed or 0
            avg_duration = avg_duration or 0
            
            if category != current_category:
                response += f"\n*{category}*\n"
                current_category = category
            
            response += f"‚Ä¢ {name} ({points} –æ—á–∫–æ–≤)\n"
            response += f"  –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed} —Ä–∞–∑\n"
            response += f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {round(avg_duration, 2)} –º–∏–Ω.\n"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        return ANALYTICS
    
    elif text == "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        cursor.execute("""
            SELECT 
                COUNT(DISTINCT c.employee_id) as active_employees,
                COUNT(c.id) as total_completed,
                SUM(c.points_earned) as total_points,
                AVG(c.duration_seconds) / 60.0 as avg_task_duration,
                SUM(c.duration_seconds) / 3600.0 as total_hours
            FROM completed_tasks c
            JOIN employees e ON c.employee_id = e.id
            WHERE c.end_time >= ? AND e.active = 1
        """, (start_date.isoformat(),))
        general_stats = cursor.fetchone()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        cursor.execute("""
            SELECT 
                t.category,
                COUNT(c.id) as category_count,
                SUM(c.points_earned) as category_points,
                AVG(c.duration_seconds) / 60.0 as category_avg_duration
            FROM completed_tasks c
            JOIN tasks t ON c.task_id = t.id
            JOIN employees e ON c.employee_id = e.id
            WHERE c.end_time >= ? AND e.active = 1
            GROUP BY t.category
            ORDER BY category_points DESC
        """, (start_date.isoformat(),))
        category_stats = cursor.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        cursor.execute("""
            SELECT 
                strftime('%w', substr(c.end_time, 1, 10)) as day_of_week,
                COUNT(c.id) as day_count,
                SUM(c.points_earned) as day_points
            FROM completed_tasks c
            JOIN employees e ON c.employee_id = e.id
            WHERE c.end_time >= ? AND e.active = 1
            GROUP BY day_of_week
            ORDER BY day_of_week
        """, (start_date.isoformat(),))
        day_stats = cursor.fetchall()
        
        conn.close()
        
        if not general_stats[0]:
            await update.message.reply_text(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ {period_name}.")
            return ANALYTICS
        
        active_employees, total_completed, total_points, avg_task_duration, total_hours = general_stats
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º None –≤ 0
        active_employees = active_employees or 0
        total_completed = total_completed or 0
        total_points = total_points or 0
        avg_task_duration = avg_task_duration or 0
        total_hours = total_hours or 0
        
        response = f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name}*\n\n"
        response += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {active_employees}\n"
        response += f"üìù –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {total_completed}\n"
        response += f"üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—á–∫–æ–≤: {total_points}\n"
        response += f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: {round(avg_task_duration, 2)} –º–∏–Ω.\n"
        response += f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {round(total_hours, 2)} —á.\n\n"
        
        if category_stats:
            response += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
            for category, count, points, avg_duration in category_stats:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º None –≤ 0
                count = count or 0
                points = points or 0
                avg_duration = avg_duration or 0
                
                response += f"‚Ä¢ {category}: {count} –∑–∞–¥–∞—á, {points} –æ—á–∫–æ–≤, {round(avg_duration, 2)} –º–∏–Ω. –≤ —Å—Ä–µ–¥–Ω–µ–º\n"
            response += "\n"
        
        if day_stats:
            days = ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
            response += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:*\n"
            for day_num, count, points in day_stats:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º None –≤ 0
                count = count or 0
                points = points or 0
                
                day_name = days[int(day_num)]
                response += f"‚Ä¢ {day_name}: {count} –∑–∞–¥–∞—á, {points} –æ—á–∫–æ–≤\n"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        return ANALYTICS
    
    elif text == "üîô –ù–∞–∑–∞–¥":
        keyboard = [
            ["–ó–∞ —Å–µ–≥–æ–¥–Ω—è", "–ó–∞ –Ω–µ–¥–µ–ª—é"],
            ["–ó–∞ –º–µ—Å—è—Ü", "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=reply_markup)
        return SELECT_PERIOD
    
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
        return ANALYTICS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async def select_employee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        keyboard = [
            ["üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
            ["üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)
        return ADMIN_MENU
    
    try:
        employee_id = int(text.split("ID: ")[1])
        employee_name = text.split(" - ID:")[0]
        context.user_data['selected_employee_id'] = employee_id
        context.user_data['selected_employee_name'] = employee_name
        
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, name, points, category FROM tasks ORDER BY category")
        tasks = cursor.fetchall()
        conn.close()
        
        if not tasks:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return ADMIN_MENU
        
        keyboard = []
        current_category = None
        
        for task in tasks:
            task_id, task_name, points, category = task
            
            if category != current_category:
                if keyboard:
                    keyboard.append([])
                current_category = category
                keyboard.append([f"--- {category} ---"])
            
            keyboard.append([f"{task_name} ({points} –æ—á–∫–æ–≤) - ID: {task_id}"])
        
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name}:", reply_markup=reply_markup)
        return ASSIGN_TASK
        
    except (IndexError, ValueError):
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return SELECT_EMPLOYEE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
async def assign_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM employees WHERE active = 1 ORDER BY name")
        employees = cursor.fetchall()
        conn.close()
        
        keyboard = []
        for emp_id, emp_name in employees:
            keyboard.append([f"{emp_name} - ID: {emp_id}"])
        
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", reply_markup=reply_markup)
        return SELECT_EMPLOYEE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if text.startswith("--- ") and text.endswith(" ---"):
        await update.message.reply_text("–≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É.")
        return ASSIGN_TASK
    
    try:
        task_id = int(text.split("ID: ")[1])
        employee_id = context.user_data['selected_employee_id']
        employee_name = context.user_data['selected_employee_name']
        
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        cursor.execute("SELECT name, points FROM tasks WHERE id = ?", (task_id,))
        task_info = cursor.fetchone()
        
        if not task_info:
            conn.close()
            await update.message.reply_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ASSIGN_TASK
        
        task_name, points = task_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        now = datetime.now().isoformat()
        cursor.execute(
            "INSERT INTO active_tasks (employee_id, task_id, start_time) VALUES (?, ?, ?)",
            (employee_id, task_id, now)
        )
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º telegram_id —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        cursor.execute("SELECT telegram_id FROM employees WHERE id = ?", (employee_id,))
        telegram_id = cursor.fetchone()[0]
        
        conn.close()
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_name}' ({points} –æ—á–∫–æ–≤) —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_name}."
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        if telegram_id:
            try:
                await context.bot.send_message(
                    chat_id=telegram_id,
                    text=f"üîî –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: '{task_name}' ({points} –æ—á–∫–æ–≤).\n"
                         f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = [
            ["üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
            ["üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)
        return ADMIN_MENU
        
    except (IndexError, ValueError, KeyError):
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ASSIGN_TASK

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def select_employee_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        keyboard = [
            ["üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
            ["üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)
        return ADMIN_MENU
    
    try:
        employee_id = int(text.split("ID: ")[1])
        employee_name = text.split(" (–ó–ü:")[0]
        
        context.user_data['edit_employee_id'] = employee_id
        context.user_data['edit_employee_name'] = employee_name
        
        keyboard = [
            ["–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É"],
            ["–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name}:", reply_markup=reply_markup)
        return EDIT_EMPLOYEE
        
    except (IndexError, ValueError):
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return SELECT_EMPLOYEE_EDIT

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async def edit_employee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    employee_id = context.user_data.get('edit_employee_id')
    employee_name = context.user_data.get('edit_employee_name')
    
    if not employee_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return ADMIN_MENU
    
    if text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name}:")
        return EDIT_EMPLOYEE_NAME
    
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É":
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name}:")
        return EDIT_EMPLOYEE_SALARY
    
    elif text == "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞":
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        cursor.execute("SELECT COUNT(*) FROM active_tasks WHERE employee_id = ?", (employee_id,))
        active_count = cursor.fetchone()[0]
        
        if active_count > 0:
            conn.close()
            await update.message.reply_text(
                f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name}, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏. "
                f"–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏."
            )
            return EDIT_EMPLOYEE
        
        # –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        cursor.execute("UPDATE employees SET active = 0 WHERE id = ?", (employee_id,))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_name} —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = [
            ["üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
            ["üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)
        return ADMIN_MENU
    
    elif text == "üîô –ù–∞–∑–∞–¥":
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, name, salary FROM employees WHERE active = 1 ORDER BY name")
        employees = cursor.fetchall()
        conn.close()
        
        keyboard = []
        for emp_id, emp_name, emp_salary in employees:
            keyboard.append([f"{emp_name} (–ó–ü: {emp_salary} —Ä—É–±.) - ID: {emp_id}"])
        
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
        return SELECT_EMPLOYEE_EDIT
    
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
        return EDIT_EMPLOYEE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async def edit_employee_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_name = update.message.text
    employee_id = context.user_data.get('edit_employee_id')
    old_name = context.user_data.get('edit_employee_name')
    
    conn = sqlite3.connect('shoeshop.db')
    cursor = conn.cursor()
    
    cursor.execute("UPDATE employees SET name = ? WHERE id = ?", (new_name, employee_id))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(f"‚úÖ –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ —Å '{old_name}' –Ω–∞ '{new_name}'.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    conn = sqlite3.connect('shoeshop.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, salary FROM employees WHERE active = 1 ORDER BY name")
    employees = cursor.fetchall()
    conn.close()
    
    keyboard = []
    for emp_id, emp_name, emp_salary in employees:
        keyboard.append([f"{emp_name} (–ó–ü: {emp_salary} —Ä—É–±.) - ID: {emp_id}"])
    
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
    return SELECT_EMPLOYEE_EDIT

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async def edit_employee_salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        new_salary = float(update.message.text)
        employee_id = context.user_data.get('edit_employee_id')
        employee_name = context.user_data.get('edit_employee_name')
        
        if new_salary <= 0:
            await update.message.reply_text("–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return EDIT_EMPLOYEE_SALARY
        
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        cursor.execute("UPDATE employees SET salary = ? WHERE id = ?", (new_salary, employee_id))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(f"‚úÖ –ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_salary} —Ä—É–±.")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, name, salary FROM employees WHERE active = 1 ORDER BY name")
        employees = cursor.fetchall()
        conn.close()
        
        keyboard = []
        for emp_id, emp_name, emp_salary in employees:
            keyboard.append([f"{emp_name} (–ó–ü: {emp_salary} —Ä—É–±.) - ID: {emp_id}"])
        
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
        return SELECT_EMPLOYEE_EDIT
        
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã.")
        return EDIT_EMPLOYEE_SALARY

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def select_task_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        keyboard = [
            ["üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
            ["üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)
        return ADMIN_MENU
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if text.startswith("--- ") and text.endswith(" ---"):
        await update.message.reply_text("–≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É.")
        return SELECT_TASK_EDIT
    
    try:
        task_id = int(text.split("ID: ")[1])
        task_name = text.split(" (")[0]
        
        context.user_data['edit_task_id'] = task_id
        context.user_data['edit_task_name'] = task_name
        
        keyboard = [
            ["–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –æ—á–∫–∏"],
            ["–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_name}':", reply_markup=reply_markup)
        return EDIT_TASK
        
    except (IndexError, ValueError):
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return SELECT_TASK_EDIT

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async def edit_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    task_id = context.user_data.get('edit_task_id')
    task_name = context.user_data.get('edit_task_name')
    
    if not task_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return ADMIN_MENU
    
    if text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ":
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_name}':")
        return EDIT_TASK_NAME
    
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –æ—á–∫–∏":
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_name}':")
        return EDIT_TASK_POINTS
    
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        keyboard = [
            ["–†–∞—Å–ø–∞–∫–æ–≤–∫–∞", "–õ–æ–≥–∏—Å—Ç–∏–∫–∞"],
            ["–ü—Ä–æ–¥–∞–∂–∏", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"],
            ["–ó–∞–∫—É–ø–∫–∞", "–î—Ä—É–≥–æ–µ"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_name}':", reply_markup=reply_markup)
        return EDIT_TASK_CATEGORY
    
    elif text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å —ç—Ç–æ–π –∑–∞–¥–∞—á–µ–π
        cursor.execute("SELECT COUNT(*) FROM active_tasks WHERE task_id = ?", (task_id,))
        active_count = cursor.fetchone()[0]
        
        if active_count > 0:
            conn.close()
            await update.message.reply_text(
                f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É '{task_name}', —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. "
                f"–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å —ç—Ç–æ–π –∑–∞–¥–∞—á–µ–π."
            )
            return EDIT_TASK
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
        cursor.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = [
            ["üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
            ["üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)
        return ADMIN_MENU
    
    elif text == "üîô –ù–∞–∑–∞–¥":
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, name, points, category FROM tasks ORDER BY category, name")
        tasks = cursor.fetchall()
        conn.close()
        
        keyboard = []
        current_category = None
        
        for task in tasks:
            task_id, task_name, points, category = task
            
            if category != current_category:
                if keyboard:
                    keyboard.append([])
                current_category = category
                keyboard.append([f"--- {category} ---"])
            
            keyboard.append([f"{task_name} ({points} –æ—á–∫–æ–≤) - ID: {task_id}"])
        
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
        return SELECT_TASK_EDIT
    
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
        return EDIT_TASK

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async def edit_task_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_name = update.message.text
    task_id = context.user_data.get('edit_task_id')
    old_name = context.user_data.get('edit_task_name')
    
    conn = sqlite3.connect('shoeshop.db')
    cursor = conn.cursor()
    
    cursor.execute("UPDATE tasks SET name = ? WHERE id = ?", (new_name, task_id))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω–æ —Å '{old_name}' –Ω–∞ '{new_name}'.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
    conn = sqlite3.connect('shoeshop.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, points, category FROM tasks ORDER BY category, name")
    tasks = cursor.fetchall()
    conn.close()
    
    keyboard = []
    current_category = None
    
    for task in tasks:
        task_id, task_name, points, category = task
        
        if category != current_category:
            if keyboard:
                keyboard.append([])
            current_category = category
            keyboard.append([f"--- {category} ---"])
        
        keyboard.append([f"{task_name} ({points} –æ—á–∫–æ–≤) - ID: {task_id}"])
    
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
    return SELECT_TASK_EDIT

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—á–∫–æ–≤ –∑–∞–¥–∞—á–∏
async def edit_task_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        new_points = int(update.message.text)
        task_id = context.user_data.get('edit_task_id')
        task_name = context.user_data.get('edit_task_name')
        
        if new_points <= 0:
            await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return EDIT_TASK_POINTS
        
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        cursor.execute("UPDATE tasks SET points = ? WHERE id = ?", (new_points, task_id))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_name}' –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_points}.")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, name, points, category FROM tasks ORDER BY category, name")
        tasks = cursor.fetchall()
        conn.close()
        
        keyboard = []
        current_category = None
        
        for task in tasks:
            task_id, task_name, points, category = task
            
            if category != current_category:
                if keyboard:
                    keyboard.append([])
                current_category = category
                keyboard.append([f"--- {category} ---"])
            
            keyboard.append([f"{task_name} ({points} –æ—á–∫–æ–≤) - ID: {task_id}"])
        
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
        return SELECT_TASK_EDIT
        
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ—á–∫–æ–≤.")
        return EDIT_TASK_POINTS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á–∏
async def edit_task_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_category = update.message.text
    task_id = context.user_data.get('edit_task_id')
    task_name = context.user_data.get('edit_task_name')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
    valid_categories = ["–†–∞—Å–ø–∞–∫–æ–≤–∫–∞", "–õ–æ–≥–∏—Å—Ç–∏–∫–∞", "–ü—Ä–æ–¥–∞–∂–∏", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ó–∞–∫—É–ø–∫–∞", "–î—Ä—É–≥–æ–µ"]
    if new_category not in valid_categories:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return EDIT_TASK_CATEGORY
    
    conn = sqlite3.connect('shoeshop.db')
    cursor = conn.cursor()
    
    cursor.execute("UPDATE tasks SET category = ? WHERE id = ?", (new_category, task_id))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏ '{task_name}' –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{new_category}'.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
    conn = sqlite3.connect('shoeshop.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, points, category FROM tasks ORDER BY category, name")
    tasks = cursor.fetchall()
    conn.close()
    
    keyboard = []
    current_category = None
    
    for task in tasks:
        task_id, task_name, points, category = task
        
        if category != current_category:
            if keyboard:
                keyboard.append([])
            current_category = category
            keyboard.append([f"--- {category} ---"])
        
        keyboard.append([f"{task_name} ({points} –æ—á–∫–æ–≤) - ID: {task_id}"])
    
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
    return SELECT_TASK_EDIT

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
async def select_active_task_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        keyboard = [
            ["üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
            ["üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)
        return ADMIN_MENU
    
    try:
        active_task_id = int(text.split("ID: ")[1])
        
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–µ
        cursor.execute("""
            SELECT a.id, e.name as employee_name, t.name as task_name, a.start_time, e.telegram_id
            FROM active_tasks a
            JOIN employees e ON a.employee_id = e.id
            JOIN tasks t ON a.task_id = t.id
            WHERE a.id = ?
        """, (active_task_id,))
        
        task_info = cursor.fetchone()
        
        if not task_info:
            conn.close()
            await update.message.reply_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return SELECT_ACTIVE_TASK_CANCEL
        
        _, employee_name, task_name, start_time, telegram_id = task_info
        
        # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
        cursor.execute("DELETE FROM active_tasks WHERE id = ?", (active_task_id,))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_name}' –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name}."
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        if telegram_id:
            try:
                await context.bot.send_message(
                    chat_id=telegram_id,
                    text=f"üîî –í–∞—à–∞ –∑–∞–¥–∞—á–∞ '{task_name}' –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT a.id, e.name as employee_name, t.name as task_name, a.start_time
            FROM active_tasks a
            JOIN employees e ON a.employee_id = e.id
            JOIN tasks t ON a.task_id = t.id
            ORDER BY e.name, a.start_time
        """)
        
        active_tasks = cursor.fetchall()
        conn.close()
        
        if not active_tasks:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
            
            keyboard = [
                ["üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
                ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
                ["üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
                ["üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"],
                ["üîô –ù–∞–∑–∞–¥"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)
            return ADMIN_MENU
        
        keyboard = []
        current_employee = None
        
        for task in active_tasks:
            task_id, employee_name, task_name, start_time = task
            start_datetime = datetime.fromisoformat(start_time)
            duration = (datetime.now() - start_datetime).total_seconds() / 60.0  # –≤ –º–∏–Ω—É—Ç–∞—Ö
            
            if employee_name != current_employee:
                if keyboard:
                    keyboard.append([])
                current_employee = employee_name
                keyboard.append([f"--- {employee_name} ---"])
            
            keyboard.append([f"{task_name} ({round(duration, 2)} –º–∏–Ω.) - ID: {task_id}"])
        
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=reply_markup)
        return SELECT_ACTIVE_TASK_CANCEL
        
    except (IndexError, ValueError):
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return SELECT_ACTIVE_TASK_CANCEL

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á
async def view_task_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        keyboard = [
            ["üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
            ["üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)
        return ADMIN_MENU
    
    try:
        employee_id = int(text.split("ID: ")[1])
        employee_name = text.split(" - ID:")[0]
        
        conn = sqlite3.connect('shoeshop.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        cursor.execute("""
            SELECT 
                c.id,
                t.name as task_name,
                c.points_earned,
                c.start_time,
                c.end_time,
                c.duration_seconds / 60.0 as duration_minutes
            FROM completed_tasks c
            JOIN tasks t ON c.task_id = t.id
            WHERE c.employee_id = ?
            ORDER BY c.end_time DESC
            LIMIT 20
        """, (employee_id,))
        
        completed_tasks = cursor.fetchall()
        conn.close()
        
        if not completed_tasks:
            await update.message.reply_text(f"–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name} –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –∏—Å—Ç–æ—Ä–∏–∏.")
            
            keyboard = [
                ["üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
                ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
                ["üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
                ["üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"],
                ["üîô –ù–∞–∑–∞–¥"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)
            return ADMIN_MENU
        
        response = f"üìã *–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)*\n\n"
        
        for task in completed_tasks:
            _, task_name, points, start_time, end_time, duration = task
            
            start_datetime = datetime.fromisoformat(start_time)
            end_datetime = datetime.fromisoformat(end_time)
            
            response += f"üìù *{task_name}*\n"
            response += f"üèÜ –û—á–∫–∏: {points}\n"
            response += f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {round(duration, 2)} –º–∏–Ω.\n"
            response += f"üïí –ù–∞—á–∞–ª–æ: {start_datetime.strftime('%d.%m.%Y %H:%M')}\n"
            response += f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {end_datetime.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
        keyboard = [
            ["üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
            ["üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)
        return ADMIN_MENU
        
    except (IndexError, ValueError):
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return VIEW_TASK_HISTORY

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = sqlite3.connect('shoeshop.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM employees WHERE telegram_id = ?", (user_id,))
    existing_employee = cursor.fetchone()
    
    if existing_employee:
        conn.close()
        await update.message.reply_text(
            f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ {existing_employee[1]} (ID: {existing_employee[0]})."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    if not context.args:
        conn.close()
        await update.message.reply_text(
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: /register ID\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /register 123"
        )
        return
    
    try:
        employee_id = int(context.args[0])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID
        cursor.execute("SELECT name, active FROM employees WHERE id = ?", (employee_id,))
        employee = cursor.fetchone()
        
        if not employee:
            conn.close()
            await update.message.reply_text(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {employee_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        employee_name, is_active = employee
        
        if not is_active:
            conn.close()
            await update.message.reply_text(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {employee_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        cursor.execute("SELECT telegram_id FROM employees WHERE id = ?", (employee_id,))
        telegram_id = cursor.fetchone()[0]
        
        if telegram_id and telegram_id != user_id:
            conn.close()
            await update.message.reply_text("–≠—Ç–æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Telegram.")
            return
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        cursor.execute(
            "UPDATE employees SET telegram_id = ? WHERE id = ?",
            (user_id, employee_id)
        )
        
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_name}.\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = []
        
        if is_admin(user_id):
            keyboard.append(["üë®‚Äçüíº –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"])
        
        keyboard.append(["üë∑ –ú–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", reply_markup=reply_markup)
        
    except ValueError:
        conn.close()
        await update.message.reply_text("ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    fill_initial_data()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    persistence = PicklePersistence(filepath="shoeshop_bot_data.pickle")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
    application = Application.builder().token("7661062439:AAGcUacoYmkvExmgsr9EGEShn8aSjXLVFss").persistence(persistence).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("register", register))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            ADMIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_menu)],
            EMPLOYEE_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, employee_menu)],
            ENTER_EMPLOYEE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_employee_name)],
            ENTER_EMPLOYEE_SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_employee_salary)],
            ENTER_TASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_task_name)],
            ENTER_TASK_POINTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_task_points)],
            ADD_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_task)],
            TAKE_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, take_task)],
            COMPLETE_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, complete_task)],
            SELECT_PERIOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_period)],
            ANALYTICS: [MessageHandler(filters.TEXT & ~filters.COMMAND, analytics)],
            SELECT_EMPLOYEE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_employee)],
            ASSIGN_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, assign_task)],
            SELECT_EMPLOYEE_EDIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_employee_edit)],
            EDIT_EMPLOYEE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_employee)],
            EDIT_EMPLOYEE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_employee_name)],
            EDIT_EMPLOYEE_SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_employee_salary)],
            SELECT_TASK_EDIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_task_edit)],
            EDIT_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_task)],
            EDIT_TASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_task_name)],
            EDIT_TASK_POINTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_task_points)],
            EDIT_TASK_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_task_category)],
            SELECT_ACTIVE_TASK_CANCEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_active_task_cancel)],
            VIEW_TASK_HISTORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, view_task_history)],
        },
        fallbacks=[CommandHandler("start", start)],
        name="main_conversation",
        persistent=True
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
